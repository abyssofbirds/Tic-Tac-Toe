{"version":3,"sources":["TicTacElement.js","services/popupService/index.js","services/TicTacToeGame/index.js","services/random.js","App.js","index.js"],"names":["handleChangeTable","elem","position","className","onClick","popupService","title","options","Swal","fire","width","padding","confirmButtonText","background","backdrop","game","state","squareSize","this","Array","fill","__makeUserStep","__makeAIStep","newState","getState","concat","includes","__checkWinBySymbol","symbol","__isHasWinLinesBySymbol","__isHasWinDiagonalsBySymbol","lines","i","length","push","slice","console","log","columns","columnIndex","column","diagonals","diagonal","__splitStateByHorizontalLines","find","line","every","cell","__splitStateByVerticalLines","__splitStateByDiagonalLines","freeSquares","nextEmptyCellIndex","indexOf","from","to","__findEmptyCells","randomElement","Math","floor","random","App","useState","gameTable","updateGameTable","handleGameStep","num","ticTacToeGame","makeStep","checkWin","alertWin","checkFail","alertLoser","isEmptyCellsExists","alertEndOfGame","resetGame","createNewGame","useEffect","then","result","isConfirmed","customClass","confirmButton","TicTacElement","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e85e97a1.chunk.js","sourcesContent":["import React from \"react\";\n\n/**\n * @param {function} handleChangeTable\n * @param elem\n * @param position\n * @return {JSX.Element}\n */\nexport default ({ handleChangeTable, elem, position }) => (\n  <td\n    className=\"border square align-middle text-uppercase\"\n    onClick={() => handleChangeTable(position)}\n  >\n    {elem}\n  </td>\n);\n","import Swal from \"sweetalert2\";\n\nclass PopupService {\n  /**\n   * @param title\n   * @param {object} options\n   */\n  fire(title, options = {}) {\n    return Swal.fire({\n      title,\n      width: 600,\n      padding: \"3em\",\n      confirmButtonText: `Ok`,\n      background: \"#fff url(/images/trees.png)\",\n      backdrop: `\n              rgba(0,0,123,0.4)\n              url(\"https://c.tenor.com/5P2BiFhQVEsAAAAi/don%27t-know-confusing.gif\")\n              right bottom -70%\n              no-repeat\n            `,\n      ...options,\n    });\n  }\n}\n\nconst popupService = new PopupService();\nexport default popupService;\n","import { randomRange } from \"../random\";\n\nclass TicTacToeGame {\n  /** @type {string[]} */\n  state = null;\n  /** @type {number} */\n  squareSize;\n\n  /**\n   * @param {number} squareSize\n   * @return {string[]}\n   */\n  createNewGame(squareSize = 3) {\n    this.squareSize = squareSize;\n    this.state = new Array(squareSize ** squareSize).fill(\"\");\n    return this.state;\n  }\n\n  makeStep(position) {\n    this.__makeUserStep(position);\n    this.__makeAIStep();\n  }\n\n  __makeUserStep(position) {\n    let newState = this.getState();\n    if (newState[position - 1] === \"\") {\n      newState[position - 1] = \"x\";\n    }\n    this.state = newState;\n  }\n\n  /** @return string[] */\n  getState() {\n    return this.state.concat();\n  }\n\n  /** @return boolean */\n  isEmptyCellsExists() {\n    return this.state.includes(\"\");\n  }\n\n  /** @return boolean */\n  checkWin() {\n    return this.__checkWinBySymbol(\"x\");\n  }\n\n  /** @return boolean */\n  checkFail() {\n    return this.__checkWinBySymbol(\"o\");\n  }\n\n  /** @return boolean */\n  __checkWinBySymbol(symbol) {\n    return (\n      this.__isHasWinLinesBySymbol(symbol) ||\n      this.__isHasWinDiagonalsBySymbol(symbol)\n    );\n  }\n\n  /** @return string[] */\n  __splitStateByHorizontalLines() {\n    let state = this.getState();\n    const lines = [];\n    for (let i = 0; i < this.state.length; i += this.squareSize) {\n      lines.push(state.slice(i, i + this.squareSize));\n    }\n    return lines;\n  }\n\n  /** @return string[] */\n  __splitStateByVerticalLines() {\n    let state = this.getState();\n\n    console.log(\"state\", state);\n    const columns = [];\n\n    for (let columnIndex = 0; columnIndex < this.squareSize; columnIndex++) {\n      const column = [];\n      for (let i = 0; i < this.state.length; i += this.squareSize) {\n        column.push(state[i + columnIndex]);\n      }\n      columns.push(column);\n    }\n\n    console.log(\"__splitStateByVerticalLines\", columns);\n    return columns;\n  }\n\n  /** @return string[] */\n  __splitStateByDiagonalLines() {\n    let state = this.getState();\n    const diagonals = [];\n\n    let diagonal = [];\n    for (let i = 0; i < this.state.length; i += this.squareSize + 1) {\n      diagonal.push(state[i]);\n    }\n    diagonals.push(diagonal);\n\n    diagonal = [];\n    for (let i = 0; i < this.state.length; i += this.squareSize - 1) {\n      diagonal.push(state[i]);\n    }\n    diagonals.push(diagonal);\n\n    return diagonals;\n  }\n\n  /**\n   * @param {string} symbol\n   * @private\n   */\n  __isHasWinLinesBySymbol(symbol) {\n    const winByHorizontal = this.__splitStateByHorizontalLines().find(\n      (line) => {\n        return line.every((cell) => cell === symbol);\n      }\n    );\n    if (winByHorizontal) return true;\n    const winByVertical = this.__splitStateByVerticalLines().find((line) => {\n      return line.every((cell) => cell === symbol);\n    });\n    if (winByVertical) return true;\n    return false;\n  }\n\n  /**\n   * @param {string} symbol\n   * @private\n   */\n  __isHasWinDiagonalsBySymbol(symbol) {\n    return this.__splitStateByDiagonalLines().find((line) => {\n      return line.every((cell) => cell === symbol);\n    });\n  }\n\n  /**\n   * @private\n   */\n  __findEmptyCells() {\n    const freeSquares = [];\n    let nextEmptyCellIndex = this.state.indexOf(\"\");\n    while (nextEmptyCellIndex !== -1) {\n      freeSquares.push(nextEmptyCellIndex);\n      nextEmptyCellIndex = this.state.indexOf(\"\", nextEmptyCellIndex + 1);\n    }\n    return freeSquares;\n  }\n\n  /**\n   * @private\n   */\n  __makeAIStep() {\n    const freeSquares = this.__findEmptyCells();\n    const randomElement = freeSquares[randomRange(0, freeSquares.length)];\n    let state = this.getState();\n    state[randomElement] = \"o\";\n    this.state = state;\n  }\n}\n\nconst game = new TicTacToeGame();\nexport default game;\n","export function randomRange(from, to) {\n  return Math.floor(from + Math.random() * (to - from));\n}\n","import React, { useEffect, useState } from \"react\";\n\nimport \"./App.css\";\n\nimport TicTacElement from \"./TicTacElement\";\n\nimport popupService from \"./services/popupService\";\nimport ticTacToeGame from \"./services/TicTacToeGame\";\n\nconst App = () => {\n  const [gameTable, updateGameTable] = useState(new Array(9).fill(\"\"));\n\n  useEffect(() => {\n    ticTacToeGame.createNewGame();\n    updateGameTable(ticTacToeGame.getState());\n  }, []);\n\n  function handleGameStep(num) {\n    ticTacToeGame.makeStep(num);\n    updateGameTable(ticTacToeGame.getState());\n\n    if (ticTacToeGame.checkWin()) {\n      alertWin();\n      return;\n    }\n    if (ticTacToeGame.checkFail()) {\n      alertLoser();\n      return;\n    }\n    if (!ticTacToeGame.isEmptyCellsExists()) {\n      alertEndOfGame();\n      return;\n    }\n  }\n\n  function resetGame() {\n    ticTacToeGame.createNewGame();\n    updateGameTable(ticTacToeGame.getState());\n  }\n\n  const alertEndOfGame = () => {\n    popupService.fire(\"Игра окончена. Ничья &#128528;\").then((result) => {\n      if (!result.isConfirmed) return;\n      resetGame();\n    });\n  };\n\n  const alertWin = () => {\n    popupService\n      .fire(\"Вы выиграли!!!\", {\n        backdrop: `\n              rgba(0,0,123,0.4)\n              url(\"https://i.pinimg.com/originals/4a/db/ca/4adbca36f44b37005a6f0c685f36117d.gif\")\n              left top\n              no-repeat\n        `,\n      })\n      .then((result) => {\n        if (!result.isConfirmed) return;\n        resetGame();\n      });\n  };\n\n  const alertLoser = () => {\n    popupService\n      .fire(\"Вы проиграли(((\", {\n        customClass: {\n          confirmButton: \"order-2\",\n        },\n        backdrop: `\n          rgba(0,0,123,0.4)\n          url(\"https://media1.giphy.com/media/l4FGrgquGXeNOS8aA/giphy.gif\")\n          right bottom\n          no-repeat\n        `,\n      })\n      .then((result) => {\n        if (!result.isConfirmed) return;\n        resetGame();\n      });\n  };\n\n  return (\n    <div className=\"mx-auto mt-5 my-app\">\n      <h1 className=\"text-center font-weight-bold text-logo\">Tic-Tac-Toe</h1>\n      <table className=\"table-bordered mx-auto mt-5\">\n        <tbody>\n          <tr>\n            <TicTacElement\n              elem={gameTable[0]}\n              handleChangeTable={handleGameStep}\n              position={1}\n            />\n            <TicTacElement\n              elem={gameTable[1]}\n              handleChangeTable={handleGameStep}\n              position={2}\n            />\n            <TicTacElement\n              elem={gameTable[2]}\n              handleChangeTable={handleGameStep}\n              position={3}\n            />\n          </tr>\n          <tr>\n            <TicTacElement\n              elem={gameTable[3]}\n              handleChangeTable={handleGameStep}\n              position={4}\n            />\n            <TicTacElement\n              elem={gameTable[4]}\n              handleChangeTable={handleGameStep}\n              position={5}\n            />\n            <TicTacElement\n              elem={gameTable[5]}\n              handleChangeTable={handleGameStep}\n              position={6}\n            />\n          </tr>\n          <tr>\n            <TicTacElement\n              elem={gameTable[6]}\n              handleChangeTable={handleGameStep}\n              position={7}\n            />\n            <TicTacElement\n              elem={gameTable[7]}\n              handleChangeTable={handleGameStep}\n              position={8}\n            />\n            <TicTacElement\n              elem={gameTable[8]}\n              handleChangeTable={handleGameStep}\n              position={9}\n            />\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./index.css\";\n\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}